#!/bin/env bash
# Copyright: 2024-2025 M.A.X. Port Team
# License: MIT

#set up some safety
set -euo pipefail

# Set default values for referenced XDG environment variables if they are unset
: "${XDG_DATA_HOME:="$HOME/.local/share"}"
: "${XDG_DATA_DIRS:="/usr/local/share:/usr/share"}"

# define directories to avoid script failures
maxport_prefs_dir=""
maxport_base_dir=""
maxport_game_data_dir=""

# Look for max-port preferences folder
if [ -f "$XDG_DATA_HOME/max-port/settings.ini" ]; then
  maxport_prefs_dir="$XDG_DATA_HOME/max-port"
elif [ -f "$HOME/.local/share/max-port/settings.ini" ]; then
  maxport_prefs_dir="$HOME/.local/share/max-port"
elif [ -f "./settings.ini" ]; then
  maxport_prefs_dir="."
else
  maxport_prefs_dir=""
fi

# Look for game base folder
for dir in ${XDG_DATA_DIRS//:/ /g}; do
  if [ -f "$dir/max-port/PATCHES.RES" ] || [ -f "$dir/max-port/patches.res" ]; then
    maxport_base_dir="$dir/max-port"
    break
  fi
done

if ! [ -f "$maxport_base_dir/PATCHES.RES" ] && ! [ -f "$maxport_base_dir/patches.res" ]; then
  if [ -f "/usr/share/max-port/PATCHES.RES" ] || [ -f "/usr/share/max-port/patches.res" ]; then
    maxport_base_dir="/usr/share/max-port"
  elif [ -f "$XDG_DATA_HOME/max-port/PATCHES.RES" ] || [ -f "$XDG_DATA_HOME/max-port/patches.res" ]; then
    maxport_base_dir="/usr/share/max-port"
  elif [ -f "./PATCHES.RES" ] || [ -f "./patches.res" ]; then
    maxport_base_dir="."
  else
    exit 0
  fi
fi

set +e
# Read game data folder location from ini file
maxport_game_data_dir=$(grep '^\[SETUP\]' --after-context=2048 \
  "$maxport_prefs_dir/settings.ini" 2>/dev/null | tail -n +2 | grep --before-context=2048 \
  '^\[' | head -n -1 | grep '^game_data' | cut -d '=' -f 2)

set -e
# Remove carriage return from path
maxport_game_data_dir=${maxport_game_data_dir%?}

if [ -f "$maxport_game_data_dir/MAX.RES" ] || [ -f "$maxport_game_data_dir/max.res" ]; then
  :
elif [ -f "./MAX.RES" ] || [ -f "./max.res" ]; then
  maxport_game_data_dir="."
else
  installer_cmd_prefix=()
  _preferred_terms=()
  _wayland_terms=()
  set +u # Disable abort on unset, this is by design here
  if [[ -n "$DISPLAY" ]] || [[ "$WAYLAND_DISPLAY" ]]; then
    # do best-effort to spawn an available terminal since there is no standard
    # mechanism to know the system terminal on Linux (yet/still?)
    # Desktop Environment-specific terminal emulators; place first when in one
    if [[ $XDG_CURRENT_DESKTOP == "KDE" ]]; then
      _preferred_terms+=("konsole")
    elif [[ $XDG_CURRENT_DESKTOP == "GNOME" ]]; then
      _preferred_terms=("gnome-terminal terminal")
    elif [[ $DESKTOP_SESSION == "bspwm" ]]; then
      true
    fi
    term_list=(
      "$TERMINAL" x-terminal-emulator "${_preferred_terms[*]}" "${_wayland_terms[*]}"
      ghostty kitty alacritty xst st qterminal wezterm ptyxis urxvt terminology kermit k3rmit lxterminal termite tilda xfce4-terminal terminator lilyterm konsole gnome-terminal Eterm eterm aterm guake terminix io.elementary.terminal mate-terminal tilix uxterm xterm roxterm cool-retro-term hyper
    )
    set -u
    for newterm in "${term_list[@]}"; do
      echo "Graphical environment detected, testing terminal emulators"
      echo >&2 "Testing '$newterm'"
      if [[ -z "$newterm" ]]; then continue; fi
      if command -v "$newterm" >/dev/null; then
        if [[ $newterm == "urxvt" ]]; then
          # Try to use client/daemon instead of standalone
          if command -v urxvtc >/dev/null; then
            if ! pgrep -a urxvtd; then
              urxvtd &
              disown
            fi
            newterm=urxvtc
          fi
        fi
        # TODO: Handle -e/-x differences across terminals
        installer_cmd_prefix+=("$newterm" "-e")
        break
      fi
    done
  fi
  set -u
  export maxport_game_data_dir maxport_base_dir maxport_prefs_dir XDG_DATA_HOME XDG_DATA_DIRSi
  # shellcheck disable=SC2048 # IGNORE: Splitting here is intentional
  ${installer_cmd_prefix[*]} "${maxport_base_dir}/max-port-installer"
fi

# Copy existing saved game files to preferences folder
cp -n "$maxport_game_data_dir/*.DTA" "$maxport_prefs_dir" 2>/dev/null || true
cp -n "$maxport_game_data_dir/*.HOT" "$maxport_prefs_dir" 2>/dev/null || true
cp -n "$maxport_game_data_dir/*.MLT" "$maxport_prefs_dir" 2>/dev/null || true
cp -n "$maxport_game_data_dir/*.BAK" "$maxport_prefs_dir" 2>/dev/null || true
cp -n "$maxport_game_data_dir/*.dta" "$maxport_prefs_dir" 2>/dev/null || true
cp -n "$maxport_game_data_dir/*.hot" "$maxport_prefs_dir" 2>/dev/null || true
cp -n "$maxport_game_data_dir/*.mlt" "$maxport_prefs_dir" 2>/dev/null || true
cp -n "$maxport_game_data_dir/*.bak" "$maxport_prefs_dir" 2>/dev/null || true

# Play the game
if [ -x "@CMAKE_INSTALL_PREFIX@/@GAME_INSTALL_LIB_PATH@/max" ]; then
  LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}@CMAKE_INSTALL_PREFIX@/@GAME_INSTALL_LIB_PATH@" "@CMAKE_INSTALL_PREFIX@/@GAME_INSTALL_LIB_PATH@/max"
elif [ -x "$maxport_base_dir/max" ]; then
  LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$maxport_base_dir" "$maxport_base_dir/max"
fi
