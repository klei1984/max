name: Build Workflow
on:
   workflow_dispatch:
      inputs:
         build_type:
            description: 'Build Configuration to use (Debug, Release, RelWithDebInfo or MinSizeRel).'
            required: false
            default: 'Debug'

   push:
      branches:
      - master
      paths-ignore:
      - '**.md'
      - '**/doc'

   pull_request:
      types:
      - opened
      - synchronize
      - reopened
      paths-ignore:
      - '**.md'
      - '**/doc'

jobs:
   Linux-x64:
      name: Linux x64
      runs-on: ubuntu-latest
      container: ubuntu:24.04

      steps:
      -  name: Set build configuration
         id: build_configuration
         run: |
            BUILD_TYPE=${{github.event.inputs.build_type}}
            echo "build_type=${BUILD_TYPE:-"Debug"}" >> $GITHUB_OUTPUT

      -  name: Cache APT packages
         uses: actions/cache@v4
         with:
            path: |
               /var/cache/apt/archives
               /var/lib/apt/lists
            key: ${{ runner.os }}-apt-${{ github.job }}-${{ hashFiles('**/.github/workflows/build.yml') }}
            restore-keys: |
               ${{ runner.os }}-apt-${{ github.job }}-
               ${{ runner.os }}-apt-

      -  name: Setup Dependencies
         run: |
            apt update -y && apt install -y sudo
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates gpg wget
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
            sudo apt-get update -y
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
            sudo apt-get install kitware-archive-keyring
            sudo apt install -y file build-essential cmake ninja-build wget gettext p7zip-full libsdl2-dev

      -  name: Checkout
         uses: actions/checkout@v4

      -  name: Build
         run: |-
            mkdir ${{steps.build_configuration.outputs.build_type}}
            cd ${{steps.build_configuration.outputs.build_type}}
            cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain-linux-x86_64.cmake -DCMAKE_BUILD_TYPE=${{steps.build_configuration.outputs.build_type}} -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/Artifacts/Linux-x64 ..
            cmake --build . --parallel

      -  name: Test
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            ctest

      -  name: Package Source
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            cpack --config CPackSourceConfig.cmake
            mkdir -p Artifacts/Linux-x64
            cp *.tar.gz Artifacts/Linux-x64/

      -  name: Upload Artifacts
         uses: actions/upload-artifact@v4
         with:
            name: ${{github.job}}
            path: ${{steps.build_configuration.outputs.build_type}}/Artifacts

   Linux-x86:
      name: Linux x86
      runs-on: ubuntu-latest
      container: ubuntu:24.04

      steps:
      -  name: Set build configuration
         id: build_configuration
         run: |
            BUILD_TYPE=${{github.event.inputs.build_type}}
            echo "build_type=${BUILD_TYPE:-"Debug"}" >> $GITHUB_OUTPUT

      -  name: Cache APT packages
         uses: actions/cache@v4
         with:
            path: |
               /var/cache/apt/archives
               /var/lib/apt/lists
            key: ${{ runner.os }}-apt-${{ github.job }}-${{ hashFiles('**/.github/workflows/build.yml') }}
            restore-keys: |
               ${{ runner.os }}-apt-${{ github.job }}-
               ${{ runner.os }}-apt-

      -  name: Setup Dependencies
         run: |
            apt update -y && apt install -y sudo
            sudo dpkg --add-architecture i386
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates gpg wget
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
            sudo apt-get update -y
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
            sudo apt-get install kitware-archive-keyring
            sudo apt-get install -y file build-essential cmake debmake dh-make gcc-multilib g++-multilib ninja-build:i386 wget gettext p7zip-full libsdl2-dev:i386

      -  name: Checkout
         uses: actions/checkout@v4

      -  name: Build
         run: |-
            mkdir ${{steps.build_configuration.outputs.build_type}}
            cd ${{steps.build_configuration.outputs.build_type}}
            cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain-linux-i686.cmake -DCMAKE_BUILD_TYPE=${{steps.build_configuration.outputs.build_type}} -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local ..
            cmake --build . --parallel

      -  name: Test
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            ctest

      -  name: Package Source
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            cpack --config CPackSourceConfig.cmake
            mkdir -p Artifacts/Linux-x86
            cp *.tar.gz Artifacts/Linux-x86/

      -  name: Upload Artifacts
         uses: actions/upload-artifact@v4
         with:
            name: ${{github.job}}
            path: ${{steps.build_configuration.outputs.build_type}}/Artifacts

   WindowsXP-x64:
      name: Windows XP x64
      runs-on: ubuntu-latest
      container: ubuntu:24.04

      steps:
      -  name: Set build configuration
         id: build_configuration
         run: |
            BUILD_TYPE=${{github.event.inputs.build_type}}
            echo "build_type=${BUILD_TYPE:-"Debug"}" >> $GITHUB_OUTPUT

      -  name: Cache APT packages
         uses: actions/cache@v4
         with:
            path: |
               /var/cache/apt/archives
               /var/lib/apt/lists
            key: ${{ runner.os }}-apt-${{ github.job }}-${{ hashFiles('**/.github/workflows/build.yml') }}
            restore-keys: |
               ${{ runner.os }}-apt-${{ github.job }}-
               ${{ runner.os }}-apt-

      -  name: Setup Dependencies
         run: |
            apt update -y && apt install -y sudo
            sudo apt-get install -y ca-certificates gpg wget
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
            sudo apt-get update -y
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
            sudo apt-get install kitware-archive-keyring
            sudo apt-get install -y file build-essential binutils-mingw-w64-x86-64 g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 ninja-build cmake nsis gettext p7zip-full libsdl2-dev

      -  name: Checkout
         uses: actions/checkout@v4

      -  name: Build
         run: |-
            mkdir ${{steps.build_configuration.outputs.build_type}}
            cd ${{steps.build_configuration.outputs.build_type}}
            cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain-cross-mingw-w64-x86_64.cmake -DCMAKE_BUILD_TYPE=${{steps.build_configuration.outputs.build_type}} -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="c:/Program Files/M.A.X. Port" ..
            cmake --build . --parallel

      -  name: Package
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            cpack --config CPackConfig.cmake
            cpack --config CPackSourceConfig.cmake
            mkdir -p Artifacts/WindowsXP-x64
            cp *-win64.exe Artifacts/WindowsXP-x64/
            cp *-win64.7z Artifacts/WindowsXP-x64/
            cp *-Source.7z Artifacts/WindowsXP-x64/
            7z a -mx9 -bd max-port-win64-symbols.7z max.debug
            cp max-port-win64-symbols.7z Artifacts/WindowsXP-x64/

      -  name: Upload Artifacts
         uses: actions/upload-artifact@v4
         with:
            name: ${{github.job}}
            path: ${{steps.build_configuration.outputs.build_type}}/Artifacts

   WindowsXP-x86:
      name: Windows XP x86
      runs-on: ubuntu-latest
      container: ubuntu:24.04

      steps:
      -  name: Set build configuration
         id: build_configuration
         run: |
            BUILD_TYPE=${{github.event.inputs.build_type}}
            echo "build_type=${BUILD_TYPE:-"Debug"}" >> $GITHUB_OUTPUT

      -  name: Cache APT packages
         uses: actions/cache@v4
         with:
            path: |
               /var/cache/apt/archives
               /var/lib/apt/lists
            key: ${{ runner.os }}-apt-${{ github.job }}-${{ hashFiles('**/.github/workflows/build.yml') }}
            restore-keys: |
               ${{ runner.os }}-apt-${{ github.job }}-
               ${{ runner.os }}-apt-

      -  name: Setup Dependencies
         run: |
            apt update -y && apt install -y sudo
            sudo dpkg --add-architecture i386
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates gpg wget
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
            sudo apt-get update -y
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
            sudo apt-get install kitware-archive-keyring
            sudo apt-get install -y file build-essential binutils-mingw-w64-i686 g++-mingw-w64-i686 gcc-mingw-w64-i686 ninja-build:i386 cmake nsis gettext p7zip-full libsdl2-dev:i386

      -  name: Checkout
         uses: actions/checkout@v4

      -  name: Build
         run: |-
            mkdir ${{steps.build_configuration.outputs.build_type}}
            cd ${{steps.build_configuration.outputs.build_type}}
            cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain-cross-mingw-w64-i686.cmake -DCMAKE_BUILD_TYPE=${{steps.build_configuration.outputs.build_type}} -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="c:/Program Files/M.A.X. Port" ..
            cmake --build . --parallel

      -  name: Package
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            cpack --config CPackConfig.cmake
            cpack --config CPackSourceConfig.cmake
            mkdir -p Artifacts/WindowsXP-x86
            cp *-win32.exe Artifacts/WindowsXP-x86/
            cp *-win32.7z Artifacts/WindowsXP-x86/
            cp *-Source.7z Artifacts/WindowsXP-x86/
            7z a -mx9 -bd max-port-win32-symbols.7z max.debug
            cp max-port-win32-symbols.7z Artifacts/WindowsXP-x86/

      -  name: Upload Artifacts
         uses: actions/upload-artifact@v4
         with:
            name: ${{github.job}}
            path: ${{steps.build_configuration.outputs.build_type}}/Artifacts

   Windows-x64:
      name: Windows x64
      runs-on: windows-2022

      defaults:
         run:
            shell: msys2 {0}

      steps:
      -  name: Install MSYS2
         uses: msys2/setup-msys2@v2
         with:
            msystem: MINGW64
            update: false
            release: true
            cache: true

      -  name: Set build configuration
         id: build_configuration
         run: |
            BUILD_TYPE=${{github.event.inputs.build_type}}
            echo "build_type=${BUILD_TYPE:-"Debug"}" >> $GITHUB_OUTPUT

      -  name: Setup Dependencies
         run: |
            pacman -S --noconfirm git mingw-w64-x86_64-toolchain p7zip mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-nsis mingw-w64-x86_64-gettext make mingw-w64-x86_64-SDL2

      -  name: Checkout
         uses: actions/checkout@v4

      -  name: Build
         run: |-
            mkdir ${{steps.build_configuration.outputs.build_type}}
            cd ${{steps.build_configuration.outputs.build_type}}
            cmake -G "MSYS Makefiles" -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain-mingw-w64-x86_64.cmake -DCMAKE_BUILD_TYPE=${{steps.build_configuration.outputs.build_type}} -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="c:/Program Files/M.A.X. Port" ..
            cmake --build . --parallel

      -  name: Test
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            ctest

      -  name: Package
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            cpack --config CPackConfig.cmake
            cpack --config CPackSourceConfig.cmake
            mkdir -p Artifacts/Windows-x64
            cp *-win64.exe Artifacts/Windows-x64/
            cp *-win64.7z Artifacts/Windows-x64/
            cp *-Source.7z Artifacts/Windows-x64/
            7z a -mx9 -bd max-port-win64-symbols.7z max.debug
            cp max-port-win64-symbols.7z Artifacts/Windows-x64/

      -  name: Upload Artifacts
         uses: actions/upload-artifact@v4
         with:
            name: ${{github.job}}
            path: ${{steps.build_configuration.outputs.build_type}}/Artifacts

   Windows-x86:
      name: Windows x86
      runs-on: windows-2022

      defaults:
         run:
            shell: msys2 {0}

      steps:
      -  name: Install MSYS2
         uses: msys2/setup-msys2@v2
         with:
            msystem: MINGW32
            update: false
            release: true
            cache: true

      -  name: Set build configuration
         id: build_configuration
         run: |
            BUILD_TYPE=${{github.event.inputs.build_type}}
            echo "build_type=${BUILD_TYPE:-"Debug"}" >> $GITHUB_OUTPUT

      -  name: Setup Dependencies
         run: |
            pacman -S --noconfirm git mingw-w64-i686-toolchain p7zip mingw-w64-i686-cmake mingw-w64-i686-ninja mingw-w64-i686-nsis mingw-w64-i686-gettext make mingw-w64-i686-SDL2

      -  name: Checkout
         uses: actions/checkout@v4

      -  name: Build
         run: |-
            mkdir ${{steps.build_configuration.outputs.build_type}}
            cd ${{steps.build_configuration.outputs.build_type}}
            cmake -G "MSYS Makefiles" -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain-mingw-w64-i686.cmake -DCMAKE_BUILD_TYPE=${{steps.build_configuration.outputs.build_type}} -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="c:/Program Files (x86)/M.A.X. Port" ..
            cmake --build . --parallel

      -  name: Test
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            ctest

      -  name: Package
         run: |
            cd ${{steps.build_configuration.outputs.build_type}}
            cpack --config CPackConfig.cmake
            cpack --config CPackSourceConfig.cmake
            mkdir -p Artifacts/Windows-x86
            cp *-win32.exe Artifacts/Windows-x86/
            cp *-win32.7z Artifacts/Windows-x86/
            cp *-Source.7z Artifacts/Windows-x86/
            7z a -mx9 -bd max-port-win32-symbols.7z max.debug
            cp max-port-win32-symbols.7z Artifacts/Windows-x86/

      -  name: Upload Artifacts
         uses: actions/upload-artifact@v4
         with:
            name: ${{github.job}}
            path: ${{steps.build_configuration.outputs.build_type}}/Artifacts

   Linux-deb-x64:
      name: Linux Debian x64
      runs-on: ubuntu-latest
      container: ubuntu:24.04
      needs: Linux-x64

      steps:
      -  name: Set build configuration
         id: build_configuration
         run: |
            BUILD_TYPE=${{github.event.inputs.build_type}}
            echo "build_type=${BUILD_TYPE:-"Debug"}" >> $GITHUB_OUTPUT

      -  name: Cache APT packages
         uses: actions/cache@v4
         with:
            path: |
               /var/cache/apt/archives
               /var/lib/apt/lists
            key: ${{ runner.os }}-apt-${{ github.job }}-${{ hashFiles('**/.github/workflows/build.yml') }}
            restore-keys: |
               ${{ runner.os }}-apt-${{ github.job }}-
               ${{ runner.os }}-apt-

      -  name: Setup Dependencies
         run: |
            apt update -y && apt install -y sudo
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates gpg wget
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
            sudo apt-get update -y
            test -f /usr/share/doc/kitware-archive-keyring/copyright ||
            sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
            sudo apt-get install kitware-archive-keyring
            sudo apt install -y file build-essential cmake ninja-build wget gettext p7zip-full libsdl2-dev

      -  name: Download source package
         uses: actions/download-artifact@v4
         with:
            name: Linux-x64
            path: ${{steps.build_configuration.outputs.build_type}}/Sources/

      -  name: Package Debian
         run: |
            sudo apt install -y debmake debhelper dh-make
            cd ${{steps.build_configuration.outputs.build_type}}/Sources/Linux-x64
            for archive in max-port-*-Source.tar.gz; do
              dir="${archive%.tar.gz}"
              mkdir -p ../../../Debian/Linux-x64
              tar zxf "$archive" --directory=../../../Debian/Linux-x64
              cd ../../../Debian/Linux-x64/${dir}
              sh cmake/scripts/linux/get-dependencies cmake/versions.cmake
              debmake --tar --monoarch --invoke "debuild -us -uc"
              mkdir -p ../../../${{steps.build_configuration.outputs.build_type}}/Artifacts/Linux-x64
              cp ../max-port_*_amd64.deb ../../../${{steps.build_configuration.outputs.build_type}}/Artifacts/Linux-x64/
              cp ../max-port-dbgsym_*_amd64.ddeb ../../../${{steps.build_configuration.outputs.build_type}}/Artifacts/Linux-x64/
              cd -
            done

      -  name: Upload Artifacts
         uses: actions/upload-artifact@v4
         with:
            name: Linux-deb-x64
            path: ${{steps.build_configuration.outputs.build_type}}/Artifacts

   Linux-arch-x64:
      name: Linux Arch x64
      runs-on: ubuntu-latest
      container:
         image: archlinux:base-devel
         options: --user root
      needs: Linux-x64
      steps:
      -  name: Setup
         run: |
            useradd --create-home builder
            echo "builder ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers.d/builder
            pacman -Syu --noconfirm

      -  name: Build
         run: |
            sudo --login --set-home --user=builder /usr/bin/bash << EOFCMD
            cat > PKGBUILD << 'EOF'
            # Copyright: 2025 M.A.X. Port Team
            # License: MIT

            # Maintainer: M.A.X. Port <maxport@maxport.org>
            pkgname="max-port"
            pkgver=0.7.2
            pkgrel=1
            pkgdesc="conquer and plunder-type turn-based sci-fi strategy game"
            arch=("\${CARCH}")
            url="https://github.com/klei1984/max"
            license=("MIT")
            depends=("sh" "libnewt" "glibc" "gcc-libs")
            makedepends=("git" "cmake" "gcc" "ninja" "wget" "gettext" "p7zip" "sdl2" "desktop-file-utils")
            source=("\$pkgname::git+https://github.com/klei1984/max.git")
            provides=("\$pkgname")
            conflicts=("\$pkgname")
            sha256sums=("SKIP")

            pkgver() {
               cd "\$pkgname"
               git describe --long --tags --abbrev=8 --exclude="*[a-zA-Z][a-zA-Z]*" \
                  | sed -E "s/^[^0-9]*//;s/([^-]*-g)/r\1/;s/-/./g"
            }

            build() {
               cd "\${srcdir}/\${pkgname}"
                  DESTDIR=\$pkgdir cmake --no-warn-unused-cli -Wno-dev -G "Ninja" \
                  -DCMAKE_TOOLCHAIN_FILE=./cmake/toolchain-linux-\${CARCH}.cmake \
                  -DMAXPORT_PKGMAKE_BUILD=TRUE \
                  -DCMAKE_BUILD_TYPE=None \
                  -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_INSTALL_PREFIX=/usr \
                  -S . -B build
               cmake --build build --parallel
            }

            package() {
               cd "\${srcdir}/\${pkgname}"
               DESTDIR="\$pkgdir" cmake --install build
               chmod 755 "\${pkgdir}/usr/bin/\${pkgname}"
               desktop-file-edit --set-key="Exec" --set-value="max-port" "\$pkgdir/usr/share/applications/\$pkgname.desktop"
               install -Dm644 LICENSE -t "\${pkgdir}/usr/share/licenses/\${pkgname}"
            }
            EOF
            makepkg --noconfirm --syncdeps --holdver
            mkdir -p Artifacts/Linux-x64
            cp max-port-*.pkg.tar.zst Artifacts/Linux-x64/
            EOFCMD

      -  name: Upload Artifacts
         uses: actions/upload-artifact@v4
         with:
            name: Linux-arch-x64
            path: /home/builder/Artifacts

   Linux-flatpak-x64:
      name: Linux Flatpak x64
      runs-on: ubuntu-latest
      container:
         image: ubuntu:24.04
         options: --privileged
      needs: Linux-x64
      steps:
      -  name: Set build configuration
         id: build_configuration
         run: |
            BUILD_TYPE=${{ github.event.inputs.build_type }}
            echo "build_type=${BUILD_TYPE:-"Debug"}" >> $GITHUB_OUTPUT

      -  name: Cache APT packages
         uses: actions/cache@v4
         with:
            path: |
               /var/cache/apt/archives
               /var/lib/apt/lists
            key: ${{ runner.os }}-apt-${{ github.job }}-${{ hashFiles('**/.github/workflows/build.yml') }}
            restore-keys: |
               ${{ runner.os }}-apt-${{ github.job }}-
               ${{ runner.os }}-apt-

      -  name: Setup Dependencies
         run: |
            apt update -y && apt install -y sudo
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates gpg wget
            test -f /usr/share/doc/kitware-archive-keyring/copyright || \
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
            sudo apt-get update -y
            test -f /usr/share/doc/kitware-archive-keyring/copyright || \
            sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg
            sudo apt-get install kitware-archive-keyring
            sudo apt install -y file build-essential cmake ninja-build wget gettext libsdl2-dev

      -  name: Download source package
         uses: actions/download-artifact@v4
         with:
            name: Linux-x64
            path: ${{steps.build_configuration.outputs.build_type}}/Sources/

      -  name: Package Flatpak
         run: |
            sudo apt install -y flatpak flatpak-builder
            flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
            flatpak install --assumeyes --noninteractive flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08
            tar zxf ${{steps.build_configuration.outputs.build_type}}/Sources/Linux-x64/max-port-*-Source.tar.gz --directory=${{steps.build_configuration.outputs.build_type}}/Sources/Linux-x64 --strip-components=1
            cd ${{steps.build_configuration.outputs.build_type}}/Sources/Linux-x64
            sh cmake/scripts/linux/get-dependencies cmake/versions.cmake
            cd ..
            flatpak-builder ${{steps.build_configuration.outputs.build_type}} --repo=repo --verbose --force-clean Linux-x64/flatpak/io.github.max-port.yaml
            flatpak build-bundle --verbose repo max-port.flatpak io.github.max-port
            mkdir -p ../Artifacts/Linux-x64
            cp max-port.flatpak ../Artifacts/Linux-x64/

      -  name: Upload Artifacts
         uses: actions/upload-artifact@v4
         with:
            name: Linux-flatpak-x64
            path: ${{steps.build_configuration.outputs.build_type}}/Artifacts
