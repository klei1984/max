find_package(Git)

if(Git_FOUND)
	execute_process(
		COMMAND ${GIT_EXECUTABLE} describe --always --tags
		RESULT_VARIABLE GIT_RESULT
		OUTPUT_VARIABLE GIT_OUTPUT
		ERROR_QUIET
	)

	string(STRIP "${GIT_OUTPUT}" GIT_OUTPUT)

	string(REGEX MATCH "^v([0-9]+)\\.([0-9]+)\\.([0-9]+)\\-([0-9]+)\\-([a-fA-F0-9]+)$" GIT_MATCHES "${GIT_OUTPUT}")
	if(CMAKE_MATCH_COUNT EQUAL 5)
		set(GAME_VERSION_MAJOR ${CMAKE_MATCH_1})
		set(GAME_VERSION_MINOR ${CMAKE_MATCH_2})
		set(GAME_VERSION_PATCH ${CMAKE_MATCH_3})
		set(GAME_VERSION_BUILD ${CMAKE_MATCH_4})
		set(GAME_VERSION_REVISION ${CMAKE_MATCH_5})
		set(GAME_VERSION "${GAME_VERSION_MAJOR}.${GAME_VERSION_MINOR}.${GAME_VERSION_PATCH} Build ${GAME_VERSION_BUILD} Revision ${GAME_VERSION_REVISION}")
	else()
		string(REGEX MATCH "^v([0-9]+)\\.([0-9]+)\\.([0-9]+)$" GIT_MATCHES "${GIT_OUTPUT}")
		if(CMAKE_MATCH_COUNT EQUAL 3)
			set(GAME_VERSION_MAJOR ${CMAKE_MATCH_1})
			set(GAME_VERSION_MINOR ${CMAKE_MATCH_2})
			set(GAME_VERSION_PATCH ${CMAKE_MATCH_3})
			set(GAME_VERSION "${GAME_VERSION_MAJOR}.${GAME_VERSION_MINOR}.${GAME_VERSION_PATCH}")
		else()
			string(REGEX MATCH "^([a-fA-F0-9]+)$" GIT_MATCHES "${GIT_OUTPUT}")
			if(CMAKE_MATCH_COUNT EQUAL 1)
				set(GAME_VERSION_REVISION ${CMAKE_MATCH_1})
			else()
				string(TIMESTAMP DATE_TIME "%Y-%m-%d %H:%M:%S")
				set(GAME_VERSION_REVISION "${DATE_TIME}")
			endif()

			set(GAME_VERSION_MAJOR "0")
			set(GAME_VERSION_MINOR "4")
			set(GAME_VERSION_PATCH "2")
			set(GAME_VERSION "${GAME_VERSION_MAJOR}.${GAME_VERSION_MINOR}.${GAME_VERSION_PATCH} Revision ${GAME_VERSION_REVISION}")
		endif()
	endif()
else()
	set(GAME_VERSION_MAJOR "0")
	set(GAME_VERSION_MINOR "4")
	set(GAME_VERSION_PATCH "2")
	set(GAME_VERSION "${GAME_VERSION_MAJOR}.${GAME_VERSION_MINOR}.${GAME_VERSION_PATCH}")
endif()

message(STATUS "Set build version to v${GAME_VERSION}")
